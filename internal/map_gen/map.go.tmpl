{{- define "maptypedef" -}}
{{ .BaseName }}{{ .Index }}[{{ template "typerange" add 1 .Index | numsTo }} any]
{{- end -}}

{{- define "kvMapTypeDef" -}}
KV{{ .BaseName }}{{ .Index }}[{{ template "kvTypeRange" add 1 .Index | numsTo }} any]
{{- end -}}

{{- define "maptype" -}}
{{ .BaseName }}{{ .Index }}[{{ template "typerange" add 1 .Index | numsTo }}]
{{- end -}}

{{- define "kvMapType" -}}
KV{{ .BaseName }}{{ .Index }}[{{ template "kvTypeRange" add 1 .Index | numsTo }}]
{{- end -}}

{{- define "prevmaptype" -}}
{{ if eq .Index 1 }}Seq[V1]{{ else }}{{ template "maptype" add .Index -1 | subTmplArgs .BaseName }}{{ end }}
{{- end -}}

{{- define "prevKVMapType" -}}
{{ if eq .Index 1 }}KVSeq[K1, V1]{{ else }}{{ template "kvMapType" add .Index -1 | subTmplArgs .BaseName }}{{ end }}
{{- end -}}

{{- define "prevmapresult" -}}
{{ if eq .Index 1 }}Seq[V2]{{ else }}{{ .BaseName }}{{ add .Index -1 }}[{{ template "typerange" add .Index 1 | numsTo | skip 1 }}]{{ end }}
{{- end -}}

{{- define "prevKVMapResult" -}}
{{ if eq .Index 1 }}KVSeq[K2, V2]{{ else }}KV{{ .BaseName }}{{ add .Index -1 }}[{{ template "kvTypeRange" add .Index 1 | numsTo | skip 1 }}]{{ end }}
{{- end -}}

{{- define "seqderef" -}}
// See [Seq.Filter].
func (s {{ template "maptype" . }}) Filter(filter yielder[V1]) {{ template "maptype" . }} {
	return {{ template "maptype" . }}(Seq[V1](s).Filter(filter))
}

// See [Seq.Skip].
func (s {{ template "maptype" . }}) Skip(toSkip int) {{ template "maptype" . }} {
	return {{ template "maptype" . }}(Seq[V1](s).Skip(toSkip))
}

// See [Seq.SkipWhile].
func (s {{ template "maptype" . }}) SkipWhile(test yielder[V1]) {{ template "maptype" . }} {
	return {{ template "maptype" . }}(Seq[V1](s).SkipWhile(test))
}

// See [Seq.Take].
func (s {{ template "maptype" . }}) Take(toTake int) {{ template "maptype" . }} {
	return {{ template "maptype" . }}(Seq[V1](s).Take(toTake))
}

// See [Seq.TakeWhile].
func (s {{ template "maptype" . }}) TakeWhile(test yielder[V1]) {{ template "maptype" . }} {
	return {{ template "maptype" . }}(Seq[V1](s).TakeWhile(test))
}
{{- end -}}

{{- define "seq2deref" -}}
func IterMapMap{{ .Index }}[{{ template "kvTypeRangeComp" add 1 .Index | numsTo }} any](m map[K1]V1) {{ template "kvMapType" . }} {
	return {{ template "kvMapType" . }}(IterMap(m))
}

// See [KVSeq.Filter].
func (s {{ template "kvMapType" . }}) Filter(filter yielder2[K1, V1]) {{ template "kvMapType" . }} {
	return {{ template "kvMapType" . }}(KVSeq[K1, V1](s).Filter(filter))
}

// See [KVSeq.Skip].
func (s {{ template "kvMapType" . }}) Skip(toSkip int) {{ template "kvMapType" . }} {
	return {{ template "kvMapType" . }}(KVSeq[K1, V1](s).Skip(toSkip))
}

// See [KVSeq.SkipWhile].
func (s {{ template "kvMapType" . }}) SkipWhile(test yielder2[K1, V1]) {{ template "kvMapType" . }} {
	return {{ template "kvMapType" . }}(KVSeq[K1, V1](s).SkipWhile(test))
}

// See [KVSeq.Take].
func (s {{ template "kvMapType" . }}) Take(toTake int) {{ template "kvMapType" . }} {
	return {{ template "kvMapType" . }}(KVSeq[K1, V1](s).Take(toTake))
}

// See [KVSeq.TakeWhile].
func (s {{ template "kvMapType" . }}) TakeWhile(test yielder2[K1, V1]) {{ template "kvMapType" . }} {
	return {{ template "kvMapType" . }}(KVSeq[K1, V1](s).TakeWhile(test))
}
{{- end -}}

package {{ .package }}

{{ range numsTo .levels -}}
{{ with subTmplArgs "Map" .I }}
type {{ template "maptypedef" . }} {{ template "prevmaptype" . }}

// Map transforms the elements within the iterator using the provided mapper function.
func (s {{ template "maptype" . }}) Map(mapper mapper[V1, V2]) {{ template "prevmapresult" . }} {
	return func(yield yielder[V2]) {
		for v := range s {
			if !yield(mapper(v)) {
				break
			}
		}
	}
}

func (s {{ template "maptype" . }}) FilterMap(mapper filteringMapper[V1, V2]) {{ template "prevmapresult" . }} {
	return func(yield yielder[V2]) {
		for v := range s {
			mapped, err := mapper(v)
			if err != nil {
				continue
			}
			if !yield(mapped) {
				break
			}
		}
	}
}

func (s {{ template "maptype" . }}) Expand(toElements mapper[V1, Seq[V2]]) {{ template "prevmapresult" . }} {
	return func(yield yielder[V2]) {
		for v := range s {
			for e := range toElements(v) {
				if !yield(e) {
					break
				}
			}
		}
	}
}

{{ template "seqderef" . }}

type {{ template "kvMapTypeDef" . }} {{ template "prevKVMapType" . }}

// Map transforms the keys and values within the iterator using the provided mapper function.
func (s {{ template "kvMapType" . }}) Map(mapper mapper2[K1, V1, K2, V2]) {{ template "prevKVMapResult" . }} {
	return func(yield yielder2[K2, V2]) {
		for k, v := range s {
			if !yield(mapper(k, v)) {
				break
			}
		}
	}
}

// Map transforms the keys and values within the iterator using the provided mapper function.
func (s {{ template "kvMapType" . }}) FilterMap(mapper filteringMapper2[K1, V1, K2, V2]) {{ template "prevKVMapResult" . }} {
	return func(yield yielder2[K2, V2]) {
		for k, v := range s {
			mk, mv, err := mapper(k, v)
			if err != nil {
				continue
			}
			if !yield(mk, mv) {
				break
			}
		}
	}
}

{{ template "seq2deref" . }}
{{ end }}
{{ end }}
